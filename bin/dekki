#!/usr/bin/env ruby
require_relative '../lib/dekki/counter.rb'
require 'jdict'
require 'optparse'

BASE_PATH   = ENV["HOME"]
DICT_PATH   = File.join(BASE_PATH, '.dicts')
INDEX_PATH  = DICT_PATH

JDict.configure do |config|
  config.dictionary_path    = DICT_PATH
  config.language           = JDict::JMDictConstants::Languages::ENGLISH
  config.num_results        = 50
end

maker = My::CardMaker.new

keep = false
individual = false
context = 2
output = nil

ARGV.options do |opts|
  opts.on("-i", "--individual", "Write a deck for each file")   { |val| individual = val }
  opts.on("-k", "--keep", "Keep cards with missing fields") { |val| keep = val  }
  opts.on("-c", "--context=val", Integer, "Sentences to keep surrounding example") { |val| context = val }
  opts.on("-o", "--output=val", "Filename (for single file only)") { |val| output = val }
  opts.parse!
end

cards = []

if individual
  ARGV.each do |a|
    list = File.open(a, 'r').readlines
    cards += maker.generate_cards(list, a, keep, individual, context)
    File.open("#{a}.txt", 'w') { |file| file.write(cards.join("\n")) }
    cards = []
  end
else
  cards = maker.generate_cards(ARGF.readlines, nil, keep, individual, context)
  wordlist = cards.join("\n")

  if output
    File.open(output, 'w') { |file| file.write(wordlist) }
  else
    puts wordlist
  end
end
